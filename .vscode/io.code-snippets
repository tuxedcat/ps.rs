{
	"read one": {
		"scope": "rust",
		"prefix": "__read1",
		"body": [
			"fn read1<T>()->T where T:FromStr, <T as FromStr>::Err: fmt::Debug{",
			"\tlet mut s = String::new();",
			"\tio::stdin().read_line(&mut s).unwrap();",
			"\ts.trim().parse().unwrap()",
			"}",
		],
	},
	"read vector": {
		"scope": "rust",
		"prefix": "__readv",
		"body": [
			"fn readv<T>()->Vec<T> where T:FromStr{",
			"\tlet mut s = String::new();",
			"\tio::stdin().read_line(&mut s).unwrap();",
			"\ts.split_whitespace().flat_map(str::parse::<T>).collect()",
			"}",
		],
	},
	"read tuple": {
		"scope": "rust",
		"prefix": "__readt",
		"body": [
			"macro_rules! readt {",
			"\t(\\$(\\$t: ty),+) => ({",
			"\t\tlet mut __a = String::new();",
			"\t\tio::stdin().read_line(&mut __a).unwrap();",
			"\t\tlet mut __it = __a.split_whitespace();",
			"\t\t(\\$(__it.next().unwrap().parse::<\\$t>().unwrap(),)+)",
			"\t})",
			"}",
		],
	},
}