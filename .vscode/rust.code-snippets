{
	// Place your rust workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"square": {
		"scope": "rust",
		"prefix": "__sq",
		"body": [
			"fn sq<T: Copy + Mul<Output = T>> (x:T) -> T { x*x }"
		],
	},
	"read one": {
		"scope": "rust",
		"prefix": "__read1",
		"body": [
			"fn read1<T>()->T where T:FromStr, <T as FromStr>::Err: fmt::Debug{",
			"\tlet mut s = String::new();",
			"\tio::stdin().read_line(&mut s);",
			"\ts.trim().parse().unwrap()",
			"}",
		],
	},
	"read vector": {
		"scope": "rust",
		"prefix": "__readv",
		"body": [
			"fn readv<T>()->Vec<T> where T:FromStr{",
			"\tlet mut s = String::new();",
			"\tio::stdin().read_line(&mut s).unwrap();",
			"\ts.split_whitespace().flat_map(str::parse::<T>).collect()",
			"}",
		],
	},
	"read tuple": {
		"scope": "rust",
		"prefix": "__readt",
		"body": [
			"macro_rules! readt {",
			"\t(\\$(\\$t: ty),+) => ({",
			"\t\tlet mut a = String::new();",
			"\t\tio::stdin().read_line(&mut a).unwrap();",
			"\t\tlet mut it = a.split_whitespace();",
			"\t\t(\\$(it.next().unwrap().parse::<\\$t>().unwrap(),)+)",
			"\t})",
			"}",
		],
	},
}